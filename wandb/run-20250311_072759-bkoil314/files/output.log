[32m[2025-03-11 07:27:59 alexnet][0m[33m(main.py 109)[0m: INFO Start training
Traceback (most recent call last):                                                                                                                                                              
  File "/home/deena/nmep/sp25-nmep-hw2/main.py", line 271, in <module>
    main(config)
  File "/home/deena/nmep/sp25-nmep-hw2/main.py", line 112, in main
    train_acc1, train_loss = train_one_epoch(config, model, criterion, data_loader_train, optimizer, epoch)
  File "/home/deena/nmep/sp25-nmep-hw2/main.py", line 175, in train_one_epoch
    optimizer.step()
  File "/home/deena/miniconda3/envs/vision-zoo/lib/python3.10/site-packages/torch/optim/lr_scheduler.py", line 140, in wrapper
    return func.__get__(opt, opt.__class__)(*args, **kwargs)
  File "/home/deena/miniconda3/envs/vision-zoo/lib/python3.10/site-packages/torch/optim/optimizer.py", line 493, in wrapper
    out = func(*args, **kwargs)
  File "/home/deena/miniconda3/envs/vision-zoo/lib/python3.10/site-packages/torch/optim/optimizer.py", line 91, in _use_grad
    ret = func(self, *args, **kwargs)
  File "/home/deena/miniconda3/envs/vision-zoo/lib/python3.10/site-packages/torch/optim/adamw.py", line 232, in step
    has_complex = self._init_group(
  File "/home/deena/miniconda3/envs/vision-zoo/lib/python3.10/site-packages/torch/optim/adamw.py", line 175, in _init_group
    state["exp_avg_sq"] = torch.zeros_like(
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 144.00 MiB. GPU 0 has a total capacity of 10.75 GiB of which 87.69 MiB is free. Process 520312 has 736.00 MiB memory in use. Process 2202170 has 4.27 GiB memory in use. Process 2415101 has 1.37 GiB memory in use. Process 2416330 has 3.47 GiB memory in use. Including non-PyTorch memory, this process has 836.00 MiB memory in use. Of the allocated memory 623.51 MiB is allocated by PyTorch, and 12.49 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
